OWASP TOP 10
1. Broken Access Control (Kiểm soát truy cập bị lỗi)

Mục tiêu: Kiểm tra xem người dùng có thể truy cập tài nguyên mà họ không có quyền không.

Bước kiểm thử:

	•	Dùng một tài khoản có quyền thấp (user) thử truy cập vào trang quản trị (/admin hoặc /dashboard).
	•	Ví dụ: Nếu API /api/admin/users chỉ dành cho admin, hãy thử gửi request với user thường.
	•	Công cụ: Postman, Burp Suite, trình duyệt.
	•	Sử dụng ID của người khác để thử lấy dữ liệu (IDOR - Insecure Direct Object Reference).
	•	Ví dụ:

GET /api/orders/1234  (User A có quyền xem)  
GET /api/orders/1235  (User B thử truy cập đơn hàng của A)  


	•	Nếu API không kiểm tra quyền, user B có thể thấy đơn hàng của user A.

	•	Thử thay đổi JWT hoặc cookie để giả mạo tài khoản có quyền cao hơn.
	•	Sử dụng JWT.io để giải mã token, thử chỉnh sửa và gửi lại.

2. Cryptographic Failures (Lỗi mã hóa)

Mục tiêu: Kiểm tra xem dữ liệu nhạy cảm có được mã hóa đúng không.

Bước kiểm thử:

	•	Kiểm tra dữ liệu nhạy cảm (mật khẩu, số thẻ) có được mã hóa trên database không.
	•	Nếu mật khẩu lưu dưới dạng plain text, đây là lỗi bảo mật nghiêm trọng.
	•	Sử dụng Wireshark để kiểm tra nếu ứng dụng gửi dữ liệu nhạy cảm qua HTTP thay vì HTTPS.
	•	Thử truy cập URL HTTP thay vì HTTPS và xem dữ liệu có bị lộ không.

3. Injection (SQL Injection, XSS, Command Injection)

Mục tiêu: Kiểm tra xem ứng dụng có dễ bị chèn mã độc không.

Bước kiểm thử:

	•	SQL Injection:
	•	Truy cập form đăng nhập, nhập thử ' OR 1=1-- vào ô username/password và kiểm tra phản hồi.
	•	Ví dụ:

SELECT * FROM users WHERE username = '' OR 1=1--' AND password = ''


	•	Nếu đăng nhập thành công, API bị lỗi SQL Injection.

	•	XSS (Cross-Site Scripting):
	•	Trên các form nhập liệu (comment, chat), nhập đoạn script sau và kiểm tra xem nó có thực thi không:

<script>alert('XSS');</script>


	•	Command Injection:
	•	Nếu API có nhập command từ user, thử chèn ; ls -la hoặc && dir để kiểm tra.

4. Insecure Design (Thiết kế không an toàn)

Mục tiêu: Xác định các điểm yếu trong thiết kế của hệ thống.

Bước kiểm thử:

	•	Kiểm tra xem API có rate-limiting không (giới hạn số request trong 1 khoảng thời gian).
	•	Thử bỏ qua xác thực bằng cách kiểm tra endpoint không yêu cầu token.
	•	Kiểm tra nếu mật khẩu không có chính sách mạnh (ví dụ: có thể đặt “123456”).

5. Security Misconfiguration (Cấu hình bảo mật sai)

Mục tiêu: Tìm các cài đặt bảo mật sai hoặc thiếu.

Bước kiểm thử:

	•	Thử truy cập các thư mục ẩn (/.git, /config, /backup).
	•	Kiểm tra nếu stack trace (lỗi debug) hiển thị trên màn hình.
	•	Ví dụ: Gửi request sai và xem server có trả về lỗi như thế này không:

System.NullReferenceException: Object reference not set to an instance of an object.


	•	Kiểm tra nếu CORS được cấu hình mở rộng (Access-Control-Allow-Origin: *).

6. Vulnerable and Outdated Components (Sử dụng thư viện lỗi thời)

Mục tiêu: Kiểm tra nếu ứng dụng dùng các thư viện cũ có lỗ hổng.

Bước kiểm thử:

	•	Chạy npm audit (đối với Angular) hoặc dotnet list package --vulnerable (đối với .NET).
	•	Kiểm tra phiên bản PostgreSQL bằng lệnh:

SELECT version();


	•	Kiểm tra header X-Powered-By, nếu server tiết lộ framework đang dùng, có thể bị tấn công dựa trên CVE.

7. Identification and Authentication Failures (Lỗi xác thực và nhận diện)

Mục tiêu: Kiểm tra cơ chế đăng nhập và bảo mật phiên.

Bước kiểm thử:

	•	Kiểm tra nếu ứng dụng không giới hạn số lần thử đăng nhập.
	•	Dùng Burp Suite gửi nhiều request đăng nhập liên tiếp.
	•	Thử xem token có hết hạn không hay vẫn dùng được sau khi đăng xuất.
	•	Thử đăng nhập bằng thông tin mặc định (admin/admin, test/test).

8. Software and Data Integrity Failures (Lỗi toàn vẹn dữ liệu và phần mềm)

Mục tiêu: Xác định nếu phần mềm cập nhật mà không xác thực nguồn gốc.

Bước kiểm thử:

	•	Nếu ứng dụng có tải file, kiểm tra xem có xác thực checksum (SHA256) không.
	•	Nếu API trả về JSON, kiểm tra xem có thể sửa response và thao túng dữ liệu không.

9. Security Logging and Monitoring Failures (Thiếu log và giám sát bảo mật)

Mục tiêu: Kiểm tra nếu hệ thống không ghi log đủ chi tiết.

Bước kiểm thử:

	•	Gửi request tấn công và kiểm tra xem hệ thống có log lại không.
	•	Nếu nhập sai mật khẩu nhiều lần, kiểm tra xem hệ thống có ghi nhận sự kiện này không.

10. Server-Side Request Forgery (SSRF - Giả mạo yêu cầu phía server)

Mục tiêu: Kiểm tra xem server có thể bị lợi dụng để gửi request đến hệ thống nội bộ không.

Bước kiểm thử:

	•	Thử nhập URL nội bộ (http://localhost:8080/admin) vào các input có thể gửi request.
	•	Nếu API cho phép tải hình ảnh, thử nhập file:///etc/passwd để xem có thể đọc file không.

Kết luận

Đây là danh sách các bài kiểm thử cụ thể cho từng lỗ hổng OWASP Top 10. Bạn có thể sử dụng Postman, Burp Suite, Wireshark, nmap để kiểm tra. Nếu bạn đang muốn test trên hệ thống thực tế của mình (như API .NET Core), mình có thể hướng dẫn bạn cách sửa các lỗ hổng phát hiện được.


Ngoài Top 10 OWASP, còn rất nhiều lỗ hổng bảo mật khác mà bạn có thể kiểm thử trên web. Dưới đây là danh sách một số lỗ hổng quan trọng khác mà các pentester và chuyên gia bảo mật thường kiểm tra:

1. Bypass Authentication (Lỗi bỏ qua xác thực)

	•	Mô tả: Ứng dụng có thể bị bỏ qua xác thực bằng cách thử nhiều cách truy cập khác nhau, chẳng hạn như:
	•	Sử dụng tài khoản mặc định hoặc yếu (admin:admin, test:test).
	•	Truy cập trực tiếp vào API nội bộ (/admin/dashboard mà không cần đăng nhập).
	•	Sử dụng JWT/Session Token đã hết hạn hoặc giả mạo.
	•	Cách kiểm thử:
	•	Thử đăng nhập với các tài khoản mặc định.
	•	Sử dụng Burp Suite để sửa đổi request, xóa hoặc thay đổi session/token.
	•	Kiểm tra nếu API trả về dữ liệu nhạy cảm mà không cần đăng nhập.

2. CORS Misconfiguration (Cấu hình CORS sai)

	•	Mô tả: Nếu CORS được cấu hình lỏng lẻo, hacker có thể gửi request từ domain lạ và lấy dữ liệu từ API của bạn.
	•	Cách kiểm thử:
	•	Kiểm tra response header:

Access-Control-Allow-Origin: *

Nếu có dấu *, thì hệ thống cho phép bất kỳ trang nào cũng có thể gọi API → Rất nguy hiểm.

	•	Sử dụng Burp Suite hoặc Postman để thử gửi request từ một domain giả mạo.

3. Server-Side Request Forgery (SSRF)

	•	Mô tả: Hacker có thể buộc server gửi request đến nội bộ (localhost) hoặc các dịch vụ khác để đánh cắp thông tin hoặc thực hiện tấn công.
	•	Cách kiểm thử:
	•	Nếu API cho phép nhập URL tùy ý, thử nhập:

http://localhost/admin  
http://169.254.169.254/latest/meta-data/ (trên AWS)  
http://internal-service:8080 (dịch vụ nội bộ)


	•	Nếu server phản hồi nội dung từ URL đó, nó có thể bị SSRF.

4. HTTP Host Header Attack (Tấn công tiêu đề HTTP Host)

	•	Mô tả: Một số ứng dụng web sử dụng header “Host” để xác định tài nguyên. Hacker có thể thay đổi giá trị này để đánh lừa hệ thống.
	•	Cách kiểm thử:
	•	Dùng Burp Suite để sửa Host trong request:

Host: evil.com


	•	Nếu phản hồi trả về nội dung từ hệ thống của bạn → Ứng dụng có thể bị Host Header Injection.

5. Business Logic Flaws (Lỗi logic nghiệp vụ)

	•	Mô tả: Lỗ hổng không phải do kỹ thuật mà do cách hệ thống xử lý nghiệp vụ sai. Ví dụ:
	•	Cho phép thanh toán số tiền âm để lấy hàng miễn phí.
	•	Cho phép thay đổi giá tiền trên client-side.
	•	Bỏ qua các bước quan trọng trong quy trình nghiệp vụ bằng cách can thiệp request.
	•	Cách kiểm thử:
	•	Kiểm tra các quy trình quan trọng như thanh toán, đặt hàng, rút tiền để tìm điểm bất hợp lý.
	•	Dùng Burp Suite để thay đổi request trước khi gửi.

6. Web Cache Poisoning (Tấn công bộ nhớ đệm web)

	•	Mô tả: Hacker có thể lưu trữ dữ liệu độc hại trong bộ nhớ đệm của server, làm ảnh hưởng đến người dùng khác.
	•	Cách kiểm thử:
	•	Thử gửi request với header như:

X-Forwarded-Host: evil.com


	•	Nếu response trả về dữ liệu từ evil.com, bộ nhớ đệm có thể bị khai thác.

7. Subdomain Takeover (Chiếm quyền subdomain)

	•	Mô tả: Nếu một subdomain trỏ đến một dịch vụ bên ngoài (AWS S3, GitHub Pages, Heroku) nhưng dịch vụ đó đã bị xóa, hacker có thể đăng ký lại dịch vụ đó và kiểm soát subdomain.
	•	Cách kiểm thử:
	•	Sử dụng nslookup hoặc dig để kiểm tra subdomain trỏ đến đâu:

nslookup sub.example.com


	•	Nếu subdomain trỏ đến dịch vụ nhưng không có nội dung hợp lệ, nó có thể bị takeover.

8. Insecure Deserialization (Giải tuần tự hóa không an toàn)

	•	Mô tả: Nếu ứng dụng nhận dữ liệu đã được serialize từ client, hacker có thể sửa đổi nội dung để thực thi mã độc.
	•	Cách kiểm thử:
	•	Kiểm tra xem API có nhận dữ liệu JSON/XML serialized không.
	•	Sử dụng Burp Suite để thay đổi nội dung trước khi gửi request.
	•	Nếu ứng dụng bị crash hoặc thực thi mã bất thường, có thể có lỗi deserialization.

9. Rate Limiting Bypass (Vượt qua giới hạn request)

	•	Mô tả: Nếu API không giới hạn số lần request, hacker có thể tấn công brute-force mật khẩu hoặc spam yêu cầu.
	•	Cách kiểm thử:
	•	Thử nhập sai mật khẩu nhiều lần xem có bị khóa không.
	•	Dùng Burp Suite hoặc script Python để gửi hàng nghìn request trong vài giây.
	•	Nếu server không có giới hạn, nó có thể bị tấn công DDoS hoặc brute-force.

10. Exposed API Keys (API key bị lộ)

	•	Mô tả: Nếu API key được nhúng trong mã JavaScript hoặc public repository trên GitHub, hacker có thể dùng nó để truy cập dữ liệu.
	•	Cách kiểm thử:
	•	Kiểm tra trong JavaScript của trang web (Ctrl + U → tìm apiKey).
	•	Dùng Google Dorking để tìm API key trên GitHub:

site:github.com "apiKey"



Kết luận

Ngoài Top 10 OWASP, còn rất nhiều lỗ hổng khác có thể kiểm tra, như:
✅ Bypass Authentication (Bỏ qua xác thực).
✅ CORS Misconfiguration (Cấu hình CORS sai).
✅ SSRF (Tấn công yêu cầu từ phía server).
✅ Subdomain Takeover (Chiếm quyền subdomain).
✅ Insecure Deserialization (Giải tuần tự hóa không an toàn).
✅ Exposed API Keys (Lộ API key).

Bạn đang muốn kiểm thử lỗ hổng cụ thể nào? Mình có thể hướng dẫn chi tiết cách test với Burp Suite hoặc script Python!
